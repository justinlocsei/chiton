(function($, _) {

window.Wintour = window.Wintour || {};

var TEMPLATES = {};
var WEIGHT_BASE = 10;

/**
 * Render a template
 *
 * @param {string} id The ID of the template
 * @param {object} context The context for rendering
 * @returns {string} The rendered output
 */
function renderTemplate(id, context) {
    var template = TEMPLATES[id];
    if (!template) {
        template = _.template($('#' + id).html());
        TEMPLATES[id] = template;
    }

    return template(context);
};

/**
 * A visualizer for a recommendation pipeline
 *
 * @param {object} $root The jQuery-wrapped root element
 */
function PipelineVisualizer($root) {
    this.$el = $root;
    this.$results = $root.find('.js-pipeline-data');
    this.$form = $root.find('.js-pipeline-form');
    this.$basicsFilter = $root.find('.js-pipeline-basics-filter');

    this._enableForm();
    this._observeScrolling();
}

PipelineVisualizer.prototype = {

    /**
     * Recalculate the recommendations based on the current profile form
     */
    recalculate: function() {

    },

    /**
     * Visualize the recommendations generated by the pipeline
     *
     * @param {object} recommendations The raw data for the recommendations
     */
    visualize: function(recommendations) {
        var context = {};

        var basics = _.map(recommendations, function(data, basicSlug) {
            var garments = _.map(data.garments, function(garment) {
                var weight = (garment.weight * WEIGHT_BASE).toFixed(1);
                weight = weight.replace(/\.0$/, '');

                return renderTemplate('pipeline-template-garment', {
                    brand: garment.garment.brand,
                    name: garment.garment.name,
                    weight: weight
                });
            });

            var basic = data.basic;

            return {
                garments: garments,
                name: basic.name
            }
        });

        context.basics = _.sortBy(basics, function(basic) {
            return basic.name;
        });

        var output = renderTemplate('pipeline-template-basics', context);
        this.$results.html(output);
    },

    /**
     * Recalculate and re-render recommendations when the form is submitted
     */
    _enableForm: function() {
        var that = this;
        var $el = this.$el;
        var $form = this.$form;

        var endpoint = $form.attr('action');

        $form.on('submit', function(e) {
            e.preventDefault();

            $el.addClass('is-loading');
            $.ajax({
                url: endpoint,
                method: 'GET',
                data: $form.serialize(),
                dataType: 'json',
                success: function(response) {
                    $el.removeClass('is-loading');
                    that.visualize(response);
                }
            });
        });
    },

    /**
     * Register a scroll handler that changes the class on secondary elements
     */
    _observeScrolling: function() {
        var $el = this.$el;
        var $window = $(window);

        var inflection = Math.min(
            this.$form.offset().top,
            this.$basicsFilter.offset().top
        );
        var isPast = false;

        var handleScroll = _.throttle(function(e) {
            var scrollTop = $window.scrollTop();
            if (scrollTop < inflection && isPast) {
                $el.removeClass('is-scrolling');
                isPast = false;
            } else if (scrollTop >= inflection && !isPast) {
                $el.addClass('is-scrolling');
                isPast = true;
            }
        }, 125);

        $window.on('scroll', handleScroll);
    }

};

/**
 * Create a new pipeline
 *
 * @param {object} options Options for creating the pipeline
 * @param {object} options.recommendations Raw data describing pre-generated recommendations
 * @param {object,string} options.root The root DOM element for the visualizer
 * @returns {Pipeline}
 */
window.Wintour.pipeline = function pipeline(options) {
    var settings = $.extend({
        recommendations: null,
        root: null
    }, options || {});

    var pipeline = new PipelineVisualizer($(settings.root));
    if (settings.recommendations) {
        pipeline.visualize(settings.recommendations);
    }

    return pipeline;
}

})(window.jQuery, window._);
